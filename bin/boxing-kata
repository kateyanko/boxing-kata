#!/usr/bin/env ruby
#Hello! Welcome to my boxing kata. Thank you so much for taking the time to review this. I appreciate it! -Kate
#If you have any questions, please feel free to reach out to KateRYanko@gmail.com.

require "bundler/setup"
require "boxing/kata/boxing_kata"

Boxing::Kata::report

require "csv" 
require "json" 

#Import CSV file
data = CSV.read("../spec/fixtures/family_preferences.csv", { encoding: "UTF-8", headers: true, header_converters: :symbol, converters: :all})

#Turn data into hashes
hashed_data = data.map { |d| d.to_hash }
#Grab contract dates from arrays and store as variable.
$contract_date = hashed_data.map {|x| x.values[4]}
#Extract color preferences from arrays and sum them by color (blue, pink, green). 
colors = hashed_data.map {|x| x.values[2]}
$colors_frequency_hash = {}

colors.each do |x|
    count = colors.count(x)
    $colors_frequency_hash[x] = count  
  end
#Save summed values to a color preference.
$blue = $colors_frequency_hash["blue"]
$pink = $colors_frequency_hash["pink"]
$green = $colors_frequency_hash["green"]

#Set a variable that will alert the shipping manager if starter boxes have not been packed. This variable changes to 1 when the starter boxes have already been packed.
$starter_boxes_packed = 0     

#Remove all nil values from the contract date data, creating a new variable that includes the primary member's contract date only. 
for i in $contract_date do 
  if i != nil 
    $primary_contract_date = i
  end
end

#Create a method that will print renewal dates every 90 days for refill boxes. 
def scheduling_dates
  for i in 1..3 do
  $primary_contract_date += 90
  if i < 3
  print $primary_contract_date.strftime("%Y-%m-%d, ")
  else
    print $primary_contract_date.strftime("%Y-%m-%d\n")
end
end
$primary_contract_date -= 270
end

#This method will print brush preferences for the shipping manager.
def import_preferences
p "BRUSH PREFERENCES"
p "blue: " + $blue.to_s
p "pink: " + $pink.to_s
p "green: " + $green.to_s
end

#SHIPPING MANAGER "PRESSES THIS BUTTON" TO IMPORT PREFERENCES
import_preferences

# This is the **STARTER BOXES** section. 
# This method will print starter box configurations for the shipping manager.
def print_starter_boxes

until $blue <= 2                
  puts "STARTER BOX"
  puts "2 blue brushes"
  puts  "2 blue replacement heads"
  $blue -= 2
  puts "2 paste kits"
  puts $primary_contract_date.strftime("%Y-%m-%d")
  puts "Mail class: priority"
end

puts "STARTER BOX"
puts $blue.to_s + " blue brushes"
puts  $blue.to_s + " blue replacement heads"
puts $blue.to_s + " paste kit(s)"
puts $primary_contract_date.strftime("%Y-%m-%d")
puts "Mail class: priority"

until $green <= 2
  puts "STARTER BOX"
  puts "2 green brushes"
  puts  "2 green replacement heads"
  $green -= 2
  puts "2 paste kits"
  puts $primary_contract_date.strftime("%Y-%m-%d")
  puts "Mail class: priority"
end

puts "STARTER BOX"
puts $green.to_s + " green brushes"
puts  $green.to_s + " green replacement heads"
puts $green.to_s + " paste kit(s)"
puts $primary_contract_date.strftime("%Y-%m-%d")
puts "Mail class: priority"

until $pink <= 2
  puts "STARTER BOX"
  puts "2 pink brushes"
  puts  "2 pink replacement heads"
  puts "2 paste kits"
  $pink -= 2
  puts $primary_contract_date.strftime("%Y-%m-%d")
  puts "Mail class: priority"
end

puts "STARTER BOX"
puts $pink.to_s + " pink brushes"
puts  $pink.to_s + " pink replacement heads"
puts $pink.to_s + " paste kit(s)"
puts $primary_contract_date.strftime("%Y-%m-%d")
puts "Mail class: priority"
# Indicates to shipping manager that starter boxes have been packed. Now they can ship refills!
$starter_boxes_packed = 1     
end
# If there are no color preferences, no starter boxes can be generated and this error message will print. 
if colors.count.to_i < 1
  puts "NO STARTER BOXES GENERATED"
end

#SHIPPING MANAGER "PRESSES THIS BUTTON" FOR STARTER BOXES
print_starter_boxes

# This is the **REFILLS** section. 
# These variables show how many replacement heads need to be shipped based off the user preferences.
$blue_replacement = $colors_frequency_hash["blue"]
$pink_replacement = $colors_frequency_hash["pink"]
$green_replacement = $colors_frequency_hash["green"]
$replacement_colors = $blue_replacement.to_i + $pink_replacement.to_i + $green_replacement.to_i

# This method will print refill box configurations for the shipping manager.
# This method starts by checking whether starter boxes have been packed.
# If no starter boxes have been packed, an error message will print. 
# If starter boxes have been packed, refill box configurations will be displayed. 
def generate_refill_boxes
  if $starter_boxes_packed == 0         
  puts "PLEASE GENERATE STARTER BOXES FIRST"
  else 
    pack_refill_boxes
  end
end

# This method will print out our refill boxes if our replacement colors are less than 4. 
# If there are more than 4 replacement colors, multiple refill box configurations will print.
def pack_refill_boxes
  if $replacement_colors <= 4
    puts "REFILL BOX"
    puts $pink_replacement.to_s + " pink replacement heads"
    puts  $green_replacement.to_s + " green replacement heads"
    puts  $blue_replacement.to_s + " blue replacement heads"
    puts $replacement_colors.to_s + " paste kit(s)"
    scheduling_dates
    puts "Mail class: first"
  else 
    pack_multiple_refill_boxes

end
end

# This method will print out our "perfect" refill boxes- boxes that have 4 replacement heads of one color.
# If there are no "perfect" refill boxes, the leftovers in each color will be saved as variables. 
def pack_multiple_refill_boxes 
  while $pink_replacement.to_i >= 4
    puts "REFILL BOX"
    puts "4 pink replacement heads"
    puts $pink_replacement.to_s + " paste kit(s)"
    $pink_replacement -= 4
    scheduling_dates
    puts "Mail class: first"
  end

  $pink_leftover = $pink_replacement

  while $green_replacement.to_i >= 4
    puts "REFILL BOX"
    puts "4 green replacement heads"
    puts $green_replacement.to_s + " paste kit(s)"
    $green_replacement -= 4
    scheduling_dates
    puts "Mail class: first"
  end
    $green_leftover = $green_replacement
  while $blue_replacement.to_i >= 4
    puts "REFILL BOX"
    puts "4 blue replacement heads"
    puts $blue_replacement.to_s + " paste kit(s)"
    $blue_replacement -= 4
    scheduling_dates
    puts "Mail class: first"
  end
    $blue_leftover = $blue_replacement
# If there are leftover values, the method "leftover_boxes" will trigger, printing refill box configurations for 
# the shipping manager. 
if $leftovers != 0 
      leftover_boxes
    end
end

$leftovers = {blue: $blue_leftover, pink: $pink_leftover, green: $green_leftover}
# This method will print out our remaining refill boxes, regardless of color. 
def leftover_boxes
  $box_capacity  = 4


  if $blue_leftover < 4 && $blue_leftover != 0
    puts "REFILL BOX"
    puts $blue_leftover.to_s + " blue replacement heads"
    $box_capacity = $box_capacity - $blue_leftover
    $blue_paste_kits = $blue_leftover
    $blue_leftover = 0

    if $leftovers != 0 && $box_capacity != 0 
        if $green_leftover < $box_capacity
          puts $green_leftover.to_s + " green replacement heads"
          $box_capacity = $box_capacity - $green_leftover
          $green_paste_kits = $green_leftover
          $green_leftover = 0
          
          if $box_capacity != 0 
            if $pink_leftover < $box_capacity
              puts $pink_leftover.to_s + " pink replacement heads"
              $box_capacity = $box_capacity - $pink_leftover
              $pink_paste_kits = $pink_leftover
              $total_paste_kits = $pink_paste_kits + $blue_paste_kits + $green_paste_kits
              puts $total_paste_kits.to_s + " paste kit(s)"
              scheduling_dates
              if $total_paste_kits == 1
                puts "Mail class: first"
              else
                puts "Mail class: priority"
              end
              $pink_leftover = 0
            end
          else 
            puts $total_paste_kits.to_s + " paste kit(s)"
            leftover_boxes
          end
        else
          puts $box_capacity.to_s + " green replacement heads"
          $blue_and_green_paste_kits = $blue_paste_kits + $box_capacity
          puts $blue_and_green_paste_kits.to_s + " paste kit(s)"
          $green_leftover = $green_leftover - $box_capacity
          scheduling_dates
          if $blue_and_green_paste_kits == 1
            puts "Mail class: first"
          else
            puts "Mail class: priority"
          end
          leftover_boxes
        end
      end
    end

  if $green_leftover < 4 && $green_leftover != 0
    puts "REFILL BOX"
          puts $green_leftover.to_s + " green replacement heads"
          $box_capacity = $box_capacity - $green_leftover
          $green_leftover = 0

          if $leftovers != 0 && $box_capacity != 0 
              if $pink_leftover < $box_capacity
                puts $pink_leftover.to_s + " pink replacement heads"
                $pink_and_green_paste_kits = $green_paste_kits + $box_capacity
                puts $pink_and_green_paste_kits.to_s + " paste kit(s)"
                $box_capacity = $box_capacity - $pink_leftover
                scheduling_dates
                if $pink_and_green_paste_kits == 1
                  puts "Mail class: first"
                else
                  puts "Mail class: priority"
                end
                $pink_leftover = 0
              else 
                puts $box_capacity.to_s + " pink replacement heads"
                puts $total_paste_kits.to_s + " paste kit(s)"
                if $total_paste_kits == 1
                  puts "Mail class: first"
                else
                  puts "Mail class: priority"
                end
                $pink_leftover = $pink_leftover - $box_capacity
                leftover_boxes
              end
            end
          end        
if $pink_leftover < 4 && $pink_leftover != 0
  puts "REFILL BOX"
  puts $pink_leftover.to_s + " pink replacement heads"
  puts $pink_leftover.to_s + " paste kit(s)"
  scheduling_dates
  if $pink_leftover == 1
    puts "Mail class: first"
  else
    puts "Mail class: priority"
  end
$pink_leftover = 0
end
end

#SHIPPING MANAGER "PRESSES THIS BUTTON" FOR REFILLS
generate_refill_boxes